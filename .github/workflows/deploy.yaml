name: Deploy Jalad e Seva

on:
  push:
    branches: [dev, master]
  workflow_dispatch:

jobs:
  deploy-api-dev:
    if: ${{ github.ref_name != 'master' && github.ref_name != 'main' }}
    uses: ./.github/workflows/deploy-api.yaml
    with:
      ENV: dev
      REGION: ${{ vars.DEV_API_AWS_REGION }}
      CODE_BUCKET: ${{ vars.DEV_API_BUCKET_NAME }}
      STACK_NAME: ${{ vars.DEV_API_STACK_NAME }}
      LAMBDA_FUNCTION_NAME: ${{ vars.DEV_API_LAMBDA_FUNCTION_NAME }}
      PROJECT_NAME: ${{ vars.PROJECT_NAME }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}

  deploy-ui-dev:
    if: ${{ github.ref_name != 'master' && github.ref_name != 'main' }}
    name: Deploy UI - Dev
    runs-on: ubuntu-latest
    environment: dev
    needs: deploy-api-dev

    env:
      ENV: dev
      REGION: ${{ vars.DEV_UI_REGION }}
      CODE_BUCKET: ${{ vars.DEV_UI_BUCKET_NAME }}
      STACK_NAME: ${{ vars.DEV_UI_STACK_NAME }}
      PROJECT_NAME: ${{ vars.PROJECT_NAME }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      # Step 1 - Check if stack exists
      - name: Check if CloudFormation stack exists
        id: check_stack
        run: |
          if aws cloudformation describe-stacks --stack-name $STACK_NAME >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      # Step 2 - Deploy stack (only if it does not exist)
      - name: Deploy UI CloudFormation stack
        if: steps.check_stack.outputs.exists == 'false'
        working-directory: ui/cloudformation
        run: |
          aws cloudformation deploy \
            --template-file ui.yaml \
            --stack-name $STACK_NAME \
            --region $REGION \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              Env=$ENV \
              BucketName=$CODE_BUCKET \
              ProjectName=$PROJECT_NAME

      # Step 3 - Build and Sync UI
      - name: Build and Sync UI to S3
        working-directory: ui
        run: |
          npm install
          npm run build
          aws s3 sync dist s3://$CODE_BUCKET --delete

# --------------------------
# PROD DEPLOYMENT
# --------------------------
  deploy-api-prod:
    if: github.ref_name == 'master'
    name: Deploy API - Prod
    runs-on: ubuntu-latest
    uses: ./.github/workflows/deploy-api.yaml
    with:
      ENV: prod
      REGION: ${{ vars.PROD_API_AWS_REGION }}
      CODE_BUCKET: ${{ vars.PROD_API_BUCKET_NAME }}
      STACK_NAME: ${{ vars.PROD_API_STACK_NAME }}
      LAMBDA_FUNCTION_NAME: ${{ vars.PROD_API_LAMBDA_FUNCTION_NAME }}
      PROJECT_NAME: ${{ vars.PROJECT_NAME }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}

  deploy-ui-prod:
    if: github.ref_name == 'master'
    name: Deploy UI - Prod
    runs-on: ubuntu-latest
    environment: prod
    needs: deploy-api-prod

    env:
      ENV: prod
      REGION: ${{ vars.PROD_UI_REGION }}
      CODE_BUCKET: ${{ vars.PROD_UI_BUCKET_NAME }}
      STACK_NAME: ${{ vars.PROD_UI_STACK_NAME }}
      REACT_APP_API_BASE_URL: ${{ vars.PROD_API_BASE_URL }}
      # other REACT_ envs...

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      # ... same steps as UI-dev but for prod
