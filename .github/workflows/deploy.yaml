name: Deploy Jalad e Seva

on:
  push:
    branches: [dev, master, api-deployment-setup]
  workflow_dispatch:

jobs:
  # --------------------
  # API / Lambda Deployment
  # --------------------
  deploy-api:
    name: Deploy API (Lambda)
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'master' && 'prod' || 'dev' }}

    env:
      ENV: ${{ github.ref_name == 'master' && 'prod' || 'dev' }}
      REGION: ${{ vars.$ENV_API_AWS_REGION }}
      CODE_BUCKET: ${{ vars.$ENV_API_BUCKET_NAME }}
      STACK_NAME: ${{ vars.$ENV_API_AWS_REGION }}
      DEFAULT_PYTHON_RUNTIME: "python3.12"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.$ENV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.$ENV_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      - name: Package Lambda function
        working-directory: backend/lambda
        run: |
          pip install -r requirements.txt --target ./
          zip -r ../../api/cloudformation/portfolio.zip .

      - name: Ensure S3 bucket exists
        run: |
          if ! aws s3api head-bucket --bucket "$CODE_BUCKET" --region "$REGION" 2>/dev/null; then
            aws s3api create-bucket --bucket "$CODE_BUCKET" --region "$REGION" --create-bucket-configuration LocationConstraint="$REGION"
          fi

      - name: Upload Lambda zip to S3
        working-directory: backend/cloudformation
        run: |
          NOW=$(date "+%Y%m%d_%H%M%S")
          CODE_PATH="$ENV/$NOW"
          echo "CODE_PATH=$CODE_PATH" >> $GITHUB_ENV
          aws s3 cp portfolio.zip s3://$CODE_BUCKET/$CODE_PATH/portfolio.zip

      - name: Deploy Lambda stack
        working-directory: backend/cloudformation
        run: |
          aws cloudformation deploy \
            --template-file template.yaml \
            --s3-bucket $CODE_BUCKET \
            --s3-prefix $CODE_PATH \
            --stack-name $STACK_NAME \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset \
            --parameter-overrides \
              Env=$ENV \
              CodeBucket=$CODE_BUCKET \
              CodePath="$CODE_PATH/portfolio.zip" \
              PythonRuntime=$DEFAULT_PYTHON_RUNTIME

  # --------------------
  # UI Deployment (React)
  # --------------------
  deploy-ui:
    name: Deploy Frontend (React)
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'master' && 'prod' || 'dev' }}
    needs: deploy-api

    env:
      REGION: ${{ vars.UI_REGION }}
      CODE_BUCKET: ${{ vars.UI_BUCKET_NAME }}
      STACK_NAME: ${{ vars.UI_STACK_NAME }}
      ENV: ${{ github.ref_name == 'master' && 'prod' || 'dev' }}
      REACT_APP_API_BASE_URL: ${{ vars.REACT_APP_API_BASE_URL }}
      REACT_APP_COGNITO_USER_POOL_ID: ${{ vars.REACT_APP_COGNITO_USER_POOL_ID }}
      REACT_APP_COGNITO_CLIENT_ID: ${{ vars.REACT_APP_COGNITO_CLIENT_ID }}
      REACT_APP_COGNITO_REGION: ${{ vars.REACT_APP_COGNITO_REGION }}
      REACT_APP_COGNITO_DOMAIN: ${{ vars.REACT_APP_COGNITO_DOMAIN }}
      REACT_APP_COGNITO_REDIRECT_SIGNIN: ${{ vars.REACT_APP_COGNITO_REDIRECT_SIGNIN }}
      REACT_APP_COGNITO_REDIRECT_SIGNOUT: ${{ vars.REACT_APP_COGNITO_REDIRECT_SIGNOUT }}
      REACT_APP_API_KEY: ${{ vars.REACT_APP_API_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      - name: Build React App
        working-directory: frontend
        run: |
          npm install
          npm run build

      - name: Upload to S3
        run: |
          aws s3 sync frontend/build s3://$CODE_BUCKET/ --delete

      - name: Deploy UI CloudFormation (if needed)
        working-directory: frontend/cloudformation
        run: |
          aws cloudformation deploy \
            --template-file template.yaml \
            --stack-name $STACK_NAME \
            --region $REGION \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset \
            --parameter-overrides \
              Env=$ENV \
              CodeBucket=$CODE_BUCKET
