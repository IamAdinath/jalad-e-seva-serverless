name: Deploy Jalad e Seva

on:
  push:
    branches: [dev, master, ui-deployment-setup]
  workflow_dispatch:

jobs:
  # --------------------------
  # DEV DEPLOYMENT
  # --------------------------
  deploy-api-dev:
    if: ${{ github.ref_name != 'master' && github.ref_name != 'main' }}
    name: Deploy API - Dev
    runs-on: ubuntu-latest
    environment: dev

    env:
      ENV: dev
      REGION: ${{ vars.DEV_API_AWS_REGION }}
      CODE_BUCKET: ${{ vars.DEV_API_BUCKET_NAME }}
      STACK_NAME: ${{ vars.DEV_API_STACK_NAME }}
      DEFAULT_PYTHON_RUNTIME: "python3.12"
      PROJECT_NAME: ${{ vars.PROJECT_NAME }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      - name: Ensure S3 Bucket exists
        run: |
          if ! aws s3api head-bucket --bucket "$CODE_BUCKET" 2>/dev/null; then
            echo "Bucket $CODE_BUCKET does not exist. Creating..."
            if [ "$REGION" = "us-east-1" ]; then
              aws s3api create-bucket --bucket "$CODE_BUCKET" --region "$REGION"
            else
              aws s3api create-bucket --bucket "$CODE_BUCKET" --region "$REGION" \
                --create-bucket-configuration LocationConstraint="$REGION"
            fi
          else
            echo "Bucket $CODE_BUCKET already exists."
          fi

      - name: Package Lambda
        working-directory: api/lambda
        run: |
          pip install -r requirements.txt --target ./
          zip -r ../../api/cloudformation/$PROJECT_NAME.zip .

      - name: Upload Lambda ZIP to S3
        working-directory: api/cloudformation
        run: |
          TIMESTAMP=$(date "+%Y%m%d_%H%M%S")
          CODE_PATH="$ENV/$TIMESTAMP"
          echo "CODE_PATH=$CODE_PATH" >> $GITHUB_ENV
          aws s3 cp $PROJECT_NAME.zip s3://$CODE_BUCKET/$CODE_PATH/$PROJECT_NAME.zip

      - name: Deploy Lambda via CloudFormation
        working-directory: api/cloudformation
        run: |
          aws cloudformation deploy \
            --template-file template.yaml \
            --s3-bucket $CODE_BUCKET \
            --s3-prefix $CODE_PATH \
            --stack-name $STACK_NAME \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset \
            --parameter-overrides \
              Env=$ENV \
              CodeBucket=$CODE_BUCKET \
              CodePath="$CODE_PATH/$PROJECT_NAME.zip" \
              PythonRuntime=$DEFAULT_PYTHON_RUNTIME \
              LinkedInClientId="" \
              GoogleClientId="" \
              GoogleClientSecret="" \
              LinkedInClientSecret="" \
              ProjectName=$PROJECT_NAME


  deploy-ui-dev:
    if: ${{ github.ref_name != 'master' && github.ref_name != 'main' }}
    name: Deploy UI - Dev
    runs-on: ubuntu-latest
    environment: dev
    needs: deploy-api-dev

    env:
      ENV: dev
      REGION: ${{ vars.DEV_UI_REGION }}
      CODE_BUCKET: ${{ vars.DEV_UI_BUCKET_NAME }}
      STACK_NAME: ${{ vars.DEV_UI_STACK_NAME }}
      # REACT_APP_API_BASE_URL: ${{ vars.DEV_API_BASE_URL }}
      PROJECT_NAME: ${{ vars.PROJECT_NAME }}
      # Add other REACT_ envs as needed...

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      - name: Build React App
        working-directory: ui
        run: |
          npm install
          npm run build

      - name: Sync to S3
        run: |
          aws s3 sync ui/build s3://$CODE_BUCKET/ --delete

# --------------------------
# PROD DEPLOYMENT
# --------------------------
  deploy-api-prod:
    if: github.ref_name == 'master'
    name: Deploy API - Prod
    runs-on: ubuntu-latest
    environment: prod

    env:
      ENV: prod
      REGION: ${{ vars.PROD_API_AWS_REGION }}
      CODE_BUCKET: ${{ vars.PROD_API_BUCKET_NAME }}
      STACK_NAME: ${{ vars.PROD_API_STACK_NAME }}
      DEFAULT_PYTHON_RUNTIME: "python3.12"
      PROJECT_NAME: ${{ vars.PROJECT_NAME }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      # ... repeat same steps as dev but use PROD secrets/vars

  deploy-ui-prod:
    if: github.ref_name == 'master'
    name: Deploy UI - Prod
    runs-on: ubuntu-latest
    environment: prod
    needs: deploy-api-prod

    env:
      ENV: prod
      REGION: ${{ vars.PROD_UI_REGION }}
      CODE_BUCKET: ${{ vars.PROD_UI_BUCKET_NAME }}
      STACK_NAME: ${{ vars.PROD_UI_STACK_NAME }}
      REACT_APP_API_BASE_URL: ${{ vars.PROD_API_BASE_URL }}
      # other REACT_ envs...

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      # ... same steps as UI-dev but for prod
